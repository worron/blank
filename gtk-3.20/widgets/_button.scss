// Settngs
$link_roundness: 4px;
$_button_pad_v: 5px;
$_button_pad_h: 8px;

$_spin_pad_v: 2px;
$_spin_pad_h: 6px;

$_linked_gap: 1px;

// Shared
%button {
	padding: $_button_pad_v $_button_pad_h;
	border-style: none;
	transition: 150ms ease;
	outline-color: transparent;
}

%undecorated_button {
	border-color: transparent;
	background-color: transparent;
	background-image: none;
	box-shadow: none;
}

%linked_middle {
	border-radius: 0;
}

%linked {
	&:first-child {
		border-radius: $link_roundness;
		border-top-right-radius: 0;
		border-bottom-right-radius: 0;
	}

	&:last-child {
		border-radius: $link_roundness;
		border-top-left-radius: 0;
		border-bottom-left-radius: 0;
	}

	&:only-child {
		border-radius: 0;
	}
}

%linked_vertical {
	&:first-child {
		border-radius: $link_roundness;
		border-bottom-left-radius: 0;
		border-bottom-right-radius: 0;
	}

	&:last-child {
		border-radius: $link_roundness;
		border-top-left-radius: 0;
		border-top-right-radius: 0;
	}

	&:only-child {
		border-radius: 0;
	}
}


// Buttons
@mixin linked_button($brd_color) {
	@extend %linked;

	border-style: solid;
	border-width: 0 $_linked_gap 0 0;
	border-color: $brd_color;

	&:last-child, &:only-child {
		border-style: none;
	}
}

@mixin linked_vertical_button($brd_color) {
	@extend %linked_vertical;

	border-style: solid;
	border-width: 0 0 $_linked_gap 0;
	border-color: $brd_color;

	&:last-child, &:only-child {
		border-style: none;
	}
}


@mixin linked_combobox_first($brd_color) {
	@extend %linked:first-child;
	border-style: solid;
	border-width: 0 $_linked_gap 0 0;
	border-color: $brd_color;
}

@mixin linked_combobox_middle($brd_color) {
	border-radius: 0;
	border-style: solid;
	border-width: 0 $_linked_gap 0 0;
	border-color: $brd_color;
}

@mixin linked_combobox_last() {
	@extend %linked:last-child;
	border-style: none;
}

@mixin linked_vertical_combobox_first($brd_color) {
	@extend %linked_vertical:first-child;
	border-style: solid;
	border-width: 0 0 $_linked_gap 0;
	border-color: $brd_color;
}

@mixin linked_vertical_combobox_middle($brd_color) {
	border-radius: 0;
	border-style: solid;
	border-width: 0 0 $_linked_gap 0;
	border-color: $brd_color;
}

@mixin linked_vertical_combobox_last() {
	@extend %linked_vertical:last-child;
	border-style: none;
}

@mixin linked_combobox_only() {
	border-radius: 0;
	border-style: none;
}

@mixin flat_button($fg) {
	color: $fg;

	&, &:focus, &:focus:hover, &:hover, &:active, &:checked { background-color: transparent; }
	&:hover { color: lighten($fg, 10%); }
	&:disabled { color: darken($fg, 40%); }
	&:active, &:checked { color: mix($fg, $selected_bg_color, 30%); };
}

@mixin button($bg, $fg) {
	$_active_color: darken(mix($bg, $selected_bg_color, 50%), 10%);

	@extend %button;
	color: $fg;
	background-color: $bg;

	&:hover {
		color: lighten($fg, 15%);
		background-color: lighten($bg, 5%);
	}

	&:active, &:checked {
		background-color: $_active_color;
		&:hover{ background-color: lighten($_active_color, 5%); }
	}

	&:disabled {
		background-color: mix($bg, $bg_color, 25%);
	}

	&:active:disabled, &:checked:disabled {
		background-color: mix($_active_color, $bg_color, 50%);
	}

	.inline-toolbar &,
	.linked > & { @include linked_button(darken($bg, 10%)); }
	.linked.vertical > & { @include linked_vertical_button(darken($bg, 10%)); }

	&.separator, .separator {
		color: transparent;
		background-image: none;
		border: none;
	}
}

@include exports("button") {
	button {
		background-image: none;
		box-shadow: none;

		@include button($button_bg_color, $button_fg_color);

		&.flat { @include flat_button($button_fg_color); }

		&.circular,
		&.circular-button {
			padding: 0;
			min-width: 32px;
			min-height: 32px;
			border-radius: 9999px;
			-gtk-outline-radius: 9999px;

			label { padding: 0; }
		}
	}

	spinbutton {
		// button {
			// color: mix($text_color, $base_color, 40%);
			// color: $text_color;
			// &:active, &:checked, &:hover { color: $text_color; }
			// @include flat_button($text_color);
			// &:disabled { color: darken($text_color, 40%); };
			// &:disabled { color: alpha($insensitive_fg_color, .8); }
		// }

		&:not(.vertical) {
			// @if (lightness($bg_color) > 50) {
			// 	border: 1px solid border_normal($bg_color);
			// 	background-color: transparent;
			// 	background-image: none;
			// 	box-shadow: inset 1px 0 shade($base_color, .9);
			// } @else {
			// 	@extend %entry;
			// 	@include linear-gradient($base_color, to top);
			// 	@include border($base_color);
			// }


			color: $text_color;
			caret-color: $text_color;
			background-color: $base_color;

			// &:focus, &:active { border-color: border_focus($borders_color); }

			// &:disabled {
			// 	@include linear-gradient(shade($base_color, .9), to top);
			// 	color: mix($base_color, $text_color, 50%);
			// }

			entry {
				padding: $_spin_pad_v $_spin_pad_h;
				border-style: none;
				background-image: none;
				box-shadow: none;
			}

			button {
				@include flat_button($text_color);
				&:disabled { color: darken($text_color, 40%); };
				padding: $_spin_pad_v $_spin_pad_h;
				// background-color: $base_color;
				// border-radius: 0;
				// border-color: alpha($borders_color, .8);
				// border-style: none;
				// background-image: none;
				// box-shadow: none;

				// @if (lightness($bg_color) > 50) {
				// 	background-color: shade($bg_color, 1.08);
				// }

				// &:hover {
				// 	@if (lightness($bg_color) > 50) {
				// 		background-color: shade($bg_color, 1.11);
				// 	}
				// }

				// &:dir(rtl) { border-style: none solid none none; }

				// &:active { box-shadow: inset 0 2px 3px -1px transparentize($black, .8); }

				// &:backdrop { border-color: alpha($backdrop_borders_color, .8); }

				// &:backdrop:disabled {
				// 	border-style: none none none solid; // It is needed or it gets overridden
				// 	&:dir(rtl) { border-style: none solid none none; }
				// }

				// &:dir(rtl):first-child { border-radius: $roundness 0 0 $roundness; }

				// &:dir(ltr):last-child { border-radius: 0 $roundness $roundness 0; }
			}
		}

		// &.vertical {
		// 	button, entry {
		// 		min-width: 0;
		// 		padding-left: $spacing - 2px;
		// 		padding-right: $spacing - 2px;
		// 	}

		// 	entry {
		// 		// reset all the other props since the spinbutton node is styled here
		// 		border-radius: 0;
		// 	}

		// 	button {
		// 		&.up {
		// 			border-style: solid solid none solid;
		// 			border-radius: $roundness $roundness 0 0;
		// 		}

		// 		&.down {
		// 			border-style: none solid solid solid;
		// 			border-radius: 0 0 $roundness $roundness;
		// 		}
		// 	}
		// }
	}
}


// ComboBoxes
@include exports("combobox") {
	combobox {
		$_linked_border_color: darken($button_bg_color, 10%);

		button.combo {
			padding: ($_button_pad_v - 2px) $_button_pad_h;
		}

		arrow {
			-gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
			min-height: 16px;
			min-width: 16px;
		}

		.linked:not(.vertical) > & > box > button.combo { @include linked_combobox_middle($_linked_border_color); }
		.linked:not(.vertical) > &:first-child > box > button.combo { @include linked_combobox_first($_linked_border_color); }
		.linked:not(.vertical) > &:last-child > box > button.combo { @include linked_combobox_last(); }
		.linked:not(.vertical) > &:only-child > box > button.combo { @include linked_combobox_only(); }

		.linked.vertical > & > box > button.combo { @include linked_vertical_combobox_middle($_linked_border_color); }
		.linked.vertical > &:first-child > box > button.combo { @include linked_vertical_combobox_first($_linked_border_color); }
		.linked.vertical > &:last-child > box > button.combo { @include linked_vertical_combobox_last(); }
		.linked.vertical > &:only-child > box > button.combo { @include linked_combobox_only(); }
	}
}
