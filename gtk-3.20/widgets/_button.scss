// Settngs
$_linked_gap: 1px;

$_button_pad_v: 5px;
$_button_pad_h: 8px;
$_button_pad_flat: 5px;

$_spin_pad_v: 3px;
$_spin_pad_h: 6px;

// Shared
%button {
	padding: $_button_pad_v $_button_pad_h;
	border-style: none;
	transition: 150ms ease;
	outline-color: transparent;
}

%undecorated_button {
	border-color: transparent;
	background-color: transparent;
	background-image: none;
	box-shadow: none;
}

// Button mixins
@mixin linked_object($brd_color, $gap: $_linked_gap ) {
	@extend %linked;

	border-style: solid;
	border-width: 0 $gap 0 0;
	border-color: $brd_color;

	&:last-child, &:only-child {
		border-style: none;
	}
}

@mixin linked_vertical_object($brd_color, $gap: $_linked_gap) {
	@extend %linked_vertical;

	border-style: solid;
	border-width: 0 0 $gap 0;
	border-color: $brd_color;

	&:last-child, &:only-child {
		border-style: none;
	}
}

@mixin linked_combobox_first($brd_color) {
	@extend %linked:first-child;
	border-style: solid;
	border-width: 0 $_linked_gap 0 0;
	border-color: $brd_color;
}

@mixin linked_combobox_middle($brd_color) {
	border-radius: 0;
	border-style: solid;
	border-width: 0 $_linked_gap 0 0;
	border-color: $brd_color;
}

@mixin linked_combobox_last() {
	@extend %linked:last-child;
	border-style: none;
}

@mixin linked_vertical_combobox_first($brd_color) {
	@extend %linked_vertical:first-child;
	border-style: solid;
	border-width: 0 0 $_linked_gap 0;
	border-color: $brd_color;
}

@mixin linked_vertical_combobox_middle($brd_color) {
	border-radius: 0;
	border-style: solid;
	border-width: 0 0 $_linked_gap 0;
	border-color: $brd_color;
}

@mixin linked_vertical_combobox_last() {
	@extend %linked_vertical:last-child;
	border-style: none;
}

@mixin linked_combobox_only() {
	border-radius: 0;
	border-style: none;
}

@mixin flat_button($fg) {
	color: $fg;
	padding: $_button_pad_flat;

	&, &:focus, &:focus:hover, &:hover, &:active, &:checked { background-color: transparent; }
	&:hover { color: lighten($fg, 10%); }
	&:disabled { color: darken($fg, 40%); }
	&:active, &:checked { color: mix($fg, $selected_bg_color, 30%); };

	border-style: none;
}

@mixin button(
	$bg: $button_bg_color,
	$fg: $button_fg_color,
	$_active_color: darken(mix($button_bg_color, $selected_bg_color, 50%), 10%)
) {
	// $_active_color: darken(mix($bg, $selected_bg_color, 50%), 10%);

	@extend %button;
	color: $fg;
	background-color: $bg;

	&:hover {
		color: lighten($fg, 15%);
		background-color: lighten($bg, 5%);
	}

	&:active, &:checked {
		background-color: $_active_color;
		&:hover{ background-color: lighten($_active_color, 5%); }
	}

	&:disabled {
		background-color: mix($bg, $bg_color, 25%);
	}

	&:active:disabled, &:checked:disabled {
		background-color: mix($_active_color, $bg_color, 50%);
	}

	.linked > & { @include linked_object(darken($bg, 10%)); }
	.linked.vertical > & { @include linked_vertical_object(darken($bg, 10%)); }

	&.separator, .separator {
		color: transparent;
		background-image: none;
		border: none;
	}
}

// Button classes
button {
	background-image: none;
	box-shadow: none;

	@include button($button_bg_color, $button_fg_color);

	&.flat { @include flat_button($fg_color); }

	&.circular,
	&.circular-button {
		padding: 0;
		min-width: 32px;
		min-height: 32px;
		border-radius: 9999px;
		-gtk-outline-radius: 9999px;

		label { padding: 0; }
	}
}

// Spinbutton
spinbutton {
	color: $text_color;
	caret-color: $text_color;
	background-color: $base_color;

	entry {
		padding: $_spin_pad_v $_spin_pad_h;
	}

	button {
		@include flat_button($text_color);
		padding: $_spin_pad_v $_spin_pad_h;

		&:disabled {
			color: mix($base_color, $text_color, 70%);
			background: mix($bg_color, $base_color, 50%);
		};
	}
}


// ComboBox
combobox {
	$_linked_border_color: darken($button_bg_color, 10%);

	button.combo {
		padding: ($_button_pad_v - 2px) $_button_pad_h;
	}

	arrow {
		-gtk-icon-source: -gtk-icontheme('pan-down-symbolic');
		min-height: 16px;
		min-width: 16px;
	}

	.linked:not(.vertical) > & > box > button.combo { @include linked_combobox_middle($_linked_border_color); }
	.linked:not(.vertical) > &:first-child > box > button.combo { @include linked_combobox_first($_linked_border_color); }
	.linked:not(.vertical) > &:last-child > box > button.combo { @include linked_combobox_last(); }
	.linked:not(.vertical) > &:only-child > box > button.combo { @include linked_combobox_only(); }

	.linked.vertical > & > box > button.combo { @include linked_vertical_combobox_middle($_linked_border_color); }
	.linked.vertical > &:first-child > box > button.combo { @include linked_vertical_combobox_first($_linked_border_color); }
	.linked.vertical > &:last-child > box > button.combo { @include linked_vertical_combobox_last(); }
	.linked.vertical > &:only-child > box > button.combo { @include linked_combobox_only(); }
}
